# This workflow runs if format workflow is completed and successfully
# workflow_run event is triggered on the default branch only
name: tests
on:
  workflow_run:
    workflows: [format]
    types: [completed]

jobs:
  ninja_clang_sodium:
    runs-on: ubuntu-20.04
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - uses: actions/checkout@v2

      - name: install requirements
        run: |
          sudo apt update
          sudo apt install -y ninja-build libcurl4-openssl-dev build-essential

      - name: Debug build
        run: |
          cmake --version
          clang --version
          mkdir build && cd build
          cmake -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_PREFIX=$PWD -DCryptoUse=libsodium -DIOTA_ASAN_ENABLED=ON -DIOTA_WALLET_ENABLE=ON ..
          ninja -v && CTEST_OUTPUT_ON_FAILURE=1 ninja test

      - name: Release build
        run: |
          rm -rf build && sync
          mkdir build && cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_PREFIX=$PWD -DCryptoUse=libsodium -DIOTA_WALLET_ENABLE=ON ..
          ninja && CTEST_OUTPUT_ON_FAILURE=1 ninja test

  make_gcc_openssl:
    runs-on: ubuntu-20.04
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - uses: actions/checkout@v2

      - name: install requirements
        run: |
          sudo apt update
          sudo apt install -y libcurl4-openssl-dev clang-format build-essential

      - name: Debug build
        run: |
          cmake --version
          gcc --version
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=$PWD -DIOTA_TESTS=ON -DIOTA_ASAN_ENABLED=ON -DCryptoUse=openssl ..
          make -j8 && make test

      - name: Release build
        run: |
          rm -rf build && sync
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD -DIOTA_TESTS=ON -DCryptoUse=openssl ..
          make -j8 && make test

  make_gcc_mbedtls:
    runs-on: ubuntu-20.04
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - uses: actions/checkout@v2

      - name: install requirements
        run: |
          sudo apt update
          sudo apt install -y libcurl4-openssl-dev clang-format build-essential

      - name: Debug build
        run: |
          cmake --version
          gcc --version
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=$PWD -DIOTA_TESTS=ON -DIOTA_ASAN_ENABLED=ON -DCryptoUse=mbedtls ..
          make -j8 && make test

      - name: Release build
        run: |
          rm -rf build && sync
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD -DIOTA_TESTS=ON -DCryptoUse=mbedtls ..
          make -j8 && make test

  ninja_clang_check_modules:
    runs-on: ubuntu-20.04
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - uses: actions/checkout@v2

      - name: install requirements
        run: |
          sudo apt update
          sudo apt install -y cppcheck ninja-build libcurl4-openssl-dev clang-format build-essential

      - name: Build Crypto
        run: |
          cmake --version
          clang --version
          mkdir build && cd build
          cmake -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_PREFIX=$PWD -DCryptoUse=openssl -DIOTA_ASAN_ENABLED=ON -DIOTA_WALLET_ENABLE=OFF -DWITH_IOTA_CLIENT=OFF -DWITH_IOTA_CORE=OFF ..
          ninja -v && CTEST_OUTPUT_ON_FAILURE=1 ninja test

      - name: Build Core
        run: |
          rm -rf build && sync
          mkdir build && cd build
          cmake -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_PREFIX=$PWD -DCryptoUse=openssl -DIOTA_ASAN_ENABLED=ON -DIOTA_WALLET_ENABLE=OFF -DWITH_IOTA_CLIENT=OFF -DWITH_IOTA_CORE=ON ..
          ninja && CTEST_OUTPUT_ON_FAILURE=1 ninja test

      - name: Build Client
        run: |
          rm -rf build && sync
          mkdir build && cd build
          cmake -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_PREFIX=$PWD -DCryptoUse=openssl -DIOTA_ASAN_ENABLED=ON -DIOTA_WALLET_ENABLE=OFF -DWITH_IOTA_CLIENT=ON -DWITH_IOTA_CORE=OFF ..
          ninja && CTEST_OUTPUT_ON_FAILURE=1 ninja test
