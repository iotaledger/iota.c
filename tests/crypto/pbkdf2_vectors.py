#! /usr/bin/env python3

"""
Script for auto-genrated PBKDF2 test vectors
Usage: ./pbkdf2_vectors.py > pbkdf2_vectors.h

Vectors from https://datatracker.ietf.org/doc/html/rfc6070
"""

import sys
import os.path
import datetime
import hashlib


def print_vector(pwd, salt, iteration, dkLen):

    # key calculation
    vecSHA1 = hashlib.pbkdf2_hmac("sha1", pwd, salt, iteration, dkLen)
    vecSHA256 = hashlib.pbkdf2_hmac("sha256", pwd, salt, iteration, dkLen)
    vecSHA512 = hashlib.pbkdf2_hmac("sha512", pwd, salt, iteration, dkLen)

    # add as a struct element
    elm = '  {' + str(iteration) + ', ' + str(dkLen) + ',\n'
    elm = elm + '  "' + pwd.hex() + '",\n'
    elm = elm + '  "' + salt.hex() + '",\n'
    elm = elm + '  "' + vecSHA1.hex() + '",\n'
    elm = elm + '  "' + vecSHA256.hex() + '",\n'
    elm = elm + '  "' + vecSHA512.hex() + '"},'
    print(elm)


def pbkdf2_vectors():
    print("/* ===auto-generated by " +
          os.path.basename(sys.argv[0]) + " DO NOT EDIT!!=== */\n")
    print("// Copyright " + str(datetime.datetime.now().year) + " IOTA Stiftung")
    print("// SPDX-License-Identifier: Apache-2.0\n")
    print("#ifndef __TEST_CRYPTO_PBKDF2_H__")
    print("#define __TEST_CRYPTO_PBKDF2_H__\n")
    print("#include <stdlib.h>\n")
    print("// PBKDF2 test vectors from https://datatracker.ietf.org/doc/html/rfc6070")

    vector_struct = """typedef struct {
  size_t iter;    ///< iteration
  size_t dk_len;  ///< length of derived key
  char *pwd;      ///< point to the password
  char *salt;     ///< point to the salt
  char *sha1;     ///< derived key from sha1
  char *sha256;   ///< derived key from sha256
  char *sha512;   ///< derived key from sha512
} pbkdf2_vector_t;
"""
    print(vector_struct)

    print('// clang-format off')
    print('static pbkdf2_vector_t pbkdf2[] = {')
    # test vectors
    print_vector(b"password", b"salt", 1, 20)
    print_vector(b"password", b"salt", 2, 20)
    print_vector(b"password", b"salt", 4096, 20)
    print_vector(b"passwordPASSWORDpassword",
                 b"saltSALTsaltSALTsaltSALTsaltSALTsalt", 4096, 25)
    print_vector(b"pass\0word", b"sa\0lt", 4096, 16)
    print('};')
    print('// clang-format on\n')
    print("#endif\n")


if __name__ == "__main__":
    pbkdf2_vectors()
