#[[
// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0
]]

# function for test cases
function(add_iota_test test_src test_name)
  add_executable(${test_name} "${test_src}")
  target_include_directories(${test_name} PRIVATE ${PROJECT_SOURCE_DIR}/src ${CMAKE_INSTALL_PREFIX}/include)
  add_dependencies(${test_name} ext_unity)
  target_compile_options(${test_name} PRIVATE -Wall -Wextra)
  if(${test_src} MATCHES "^core")
    add_dependencies(${test_name} iota_core)
    target_link_libraries(${test_name} PRIVATE iota_core unity)
  elseif(${test_src} MATCHES "^crypto")
    add_dependencies(${test_name} iota_crypto)
    target_link_libraries(${test_name} PRIVATE iota_crypto unity)
  elseif(${test_src} MATCHES "^client")
    add_dependencies(${test_name} iota_client)
    target_include_directories(${test_name} PRIVATE ${PROJECT_SOURCE_DIR}/tests/client)
    target_link_libraries(${test_name} PRIVATE iota_client unity)
  elseif(${test_src} MATCHES "^wallet")
    add_dependencies(${test_name} iota_wallet)
    target_link_libraries(${test_name} PRIVATE iota_wallet unity)
  endif()
  add_test(${test_name} ${test_name})
endfunction(add_iota_test)

# crypto test cases
add_custom_target(
  copy_test_vectors COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_LIST_DIR}/crypto/ed25519_sign.input
                            ${CMAKE_CURRENT_BINARY_DIR})
add_iota_test("crypto/test_crypto.c" crypto_crypto)
add_dependencies(crypto_crypto copy_test_vectors)

# core test cases
if(WITH_IOTA_CORE)
  add_iota_test("core/test_address.c" core_address)
  add_iota_test("core/test_inputs.c" core_inputs)
  add_iota_test("core/test_byte_cost_config.c" core_byte_cost_config)
  add_iota_test("core/test_native_tokens.c" core_native_tokens)
  add_iota_test("core/test_output_alias.c" core_output_alias)
  add_iota_test("core/test_output_basic.c" core_output_basic)
  add_iota_test("core/test_output_foundry.c" core_output_foundry)
  add_iota_test("core/test_output_nft.c" core_output_nft)
  add_iota_test("core/test_outputs.c" core_outputs)
  add_iota_test("core/test_unlock_block.c" core_unlock_block)
  add_iota_test("core/test_iota_str.c" core_iota_str)
  add_iota_test("core/test_uint256.c" core_uint256)
  if(__JEMALLOC_INCLUDED)
    add_iota_test("core/test_allocator.c" core_allocator)
  endif()
  add_iota_test("core/test_byte_buffer.c" core_byte_buffer)
  add_iota_test("core/test_slip10.c" core_slip10)
  add_iota_test("core/test_utils_bech32.c" core_utils_bech32)
  add_iota_test("core/test_transaction.c" core_transaction)
  add_iota_test("core/test_transaction_nft.c" core_transaction_nft)
  add_iota_test("core/test_transaction_alias.c" core_transaction_alias)
  add_iota_test("core/test_storage_deposit.c" core_storage_deposit)
  add_iota_test("core/test_tagged_data.c" core_tagged_data)
  add_iota_test("core/test_message.c" core_message)
  add_iota_test("core/test_feat_blocks.c" core_feat_blocks)
  add_iota_test("core/test_condition_blocks.c" core_condition_blocks)
endif()

# client test cases
if(WITH_IOTA_CLIENT)
  add_iota_test("client/test_http.c" client_http)
  add_iota_test("client/test_json.c" client_json)
  add_iota_test("client/api_json_parser/test_common.c" client_common)
  add_iota_test("client/api_json_parser/test_feat_blocks.c" client_feat_blocks)
  add_iota_test("client/api_json_parser/test_inputs.c" client_inputs)
  add_iota_test("client/api_json_parser/test_native_tokens.c" client_native_tokens)
  add_iota_test("client/api_json_parser/test_output_alias.c" client_output_alias)
  add_iota_test("client/api_json_parser/test_output_basic.c" client_output_basic)
  add_iota_test("client/api_json_parser/test_output_foundry.c" client_output_foundry)
  add_iota_test("client/api_json_parser/test_output_nft.c" client_output_nft)
  add_iota_test("client/api_json_parser/test_outputs.c" client_outputs)
  add_iota_test("client/api_json_parser/test_unlock_conditions.c" client_unlock_conditions)
  add_iota_test("client/api_json_parser/test_unlock_blocks.c" client_unlock_blocks)
  add_iota_test("client/api_restful/test_get_info.c" client_get_info)
  add_iota_test("client/api_restful/test_response_error.c" client_res_error)
  add_iota_test("client/api_restful/test_get_tips.c" client_get_tips)
  add_iota_test("client/api_restful/test_outputs_id.c" client_outputs_id)
  add_iota_test("client/api_restful/test_get_output.c" client_get_output)
  add_iota_test("client/api_restful/test_get_health.c" client_get_health)
  add_iota_test("client/api_restful/test_get_message.c" client_get_message)
  add_iota_test("client/api_restful/test_get_milestone.c" client_get_milestone)
  add_iota_test("client/api_restful/test_send_message.c" client_send_message)
  add_iota_test("client/api_restful/test_send_tagged_data.c" client_send_tagged_data)
  add_iota_test("client/api_restful/test_faucet_enqueue.c" client_faucet_enqueue)
  add_iota_test("client/api_restful/test_message_meta.c" client_message_meta)
  add_iota_test("client/api_restful/test_message_children.c" client_message_children)
  add_iota_test("client/api_restful/test_get_transaction_included_message.c" client_get_transaction_included_message)
endif()

if(MQTT_CLIENT_ENABLE)
  add_iota_test("client/api_events/test_milestones_events.c" test_milestones_event)
  add_iota_test("client/api_events/test_messages_events.c" test_messages_events)
  add_iota_test("client/api_events/test_outputs_payloads.c" test_outputs_payloads)
  add_iota_test("client/api_events/test_serialized_messages_events.c" test_serialized_message_event)
endif()

# Wallet APIs
if(IOTA_WALLET_ENABLE)
  add_iota_test("wallet/test_wallet.c" test_wallet_api)
  add_iota_test("wallet/test_bip39.c" test_bip39)
endif()
